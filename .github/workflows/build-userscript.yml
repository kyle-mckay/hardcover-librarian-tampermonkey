name: Build Hardcover UserScript

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Git for pushing
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Wait 20 seconds
        run: sleep 20
      
      - name: Wait for Release Drafter to create draft
        id: wait_for_draft
        uses: actions/github-script@v6
        with:
          retries: 20
          retry-delay-seconds: 6
          script: |
            for (let attempt = 0; attempt < 20; attempt++) {
              const releases = await github.rest.repos.listReleases({
                owner: context.repo.owner,
                repo: context.repo.repo,
              });
              const draftRelease = releases.data.find(r => r.draft && r.tag_name);
              if (draftRelease) {
                core.info(`Found draft release with tag: ${draftRelease.tag_name}`);
                core.setOutput("tag", draftRelease.tag_name);
                return;
              }
              core.info("No draft release found yet. Retrying...");
              await new Promise(resolve => setTimeout(resolve, 6000));
            }
            throw new Error("Timed out waiting for draft release with tag");


      - name: Get current release draft tag
        id: get_draft
        uses: actions/github-script@v6
        with:
          script: |
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            const draftRelease = releases.data.find(r => r.draft);
            if (!draftRelease) {
              core.setOutput("tag", "");
            } else {
              core.setOutput("tag", draftRelease.tag_name);
            }

      - name: Write release tag to file
        if: steps.get_draft.outputs.tag != ''
        run: |
          mkdir -p build
          echo "${{ steps.get_draft.outputs.tag }}" > build/release.txt

      - name: Run verify.sh to check build files
        id: verify
        run: |
          chmod +x ./build/verify.sh
          ./build/verify.sh > verify_result.txt
          cat verify_result.txt
          echo "verify_result=$(cat verify_result.txt)" >> $GITHUB_OUTPUT

      - name: Handle missing files (create PR)
        if: steps.verify.outputs.verify_result == 'false'
        uses: peter-evans/create-pull-request@v5
        with:
          commit-message: Update build_files.list with missing source files
          branch: update-build-files-list
          title: Update build_files.list to include new source files
          labels: patch
          body: |
            This PR updates the build_files.list to include new source files detected in the src/ directory.

      - name: Run build.sh and push dist if verify passed
        if: steps.verify.outputs.verify_result == 'true'
        run: |
          chmod +x ./build/build.sh
          ./build/build.sh
          git add ./hardcover.user.js ./src/core/headers.js ./build/release.txt
          git commit -m "Build: Update hardcover.user.js on push to main" || echo "No changes to commit"
          git push
